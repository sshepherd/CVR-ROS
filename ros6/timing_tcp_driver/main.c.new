#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#ifdef __QNX__
  #include <hw/inout.h>
  #include <sys/socket.h>
  #include <sys/neutrino.h>
  #include <netinet/in.h>
  #include <netinet/tcp.h>
#endif
#include <signal.h>
#include <math.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include "control_program.h"
#include "global_server_variables.h"
#include "utils.h"
#include "timing_defs.h"
#define MAX_TSG 16
#define	MAX_TIME_SEQ_LEN 1048576
#define MAX_PULSES 100
int sock,msgsock;
int verbose=0;
struct timeval int_times[50];
int int_transfer[50],int_xfer[50];
int		writingFIFO=0, IRQ, intid,int_count;
int		max_seq_count, xfercount, totransfer;
unsigned char	*mmap_io_ptr_dio;
unsigned char	*BASE0_dio, *io_BASE1_dio, *BASE1_phys_dio;
unsigned int	virtual_addr[1], physical_addr[1];
struct sigevent interruptevent;
int tr_event=0, fifo_count=0,scope_event=0;
pthread_t int_thread=NULL;
void graceful_cleanup(int signum)
{
  int temp;
#ifdef __QNX__
  // disable interrupts
  temp=in32( mmap_io_ptr_dio+0x0c);
  out32(mmap_io_ptr_dio+0x0c, temp & 0xffffff00);
  InterruptDetach(intid);
#endif
  close(msgsock);
  close(sock);
  exit(0);
}

const struct sigevent* isr_handler(void *arg, int id){
	int temp;
#ifdef __QNX__
	//if interrupt created by timing card, then clear it
	temp=in32(mmap_io_ptr_dio+0x0c);
	if( (temp & 0x04) == 0x04 ){
		temp|=0x04;
		out32(mmap_io_ptr_dio+0x0c, temp);
		return(&interruptevent);
	}
	else{
		return(NULL);
	}
#else
		return(NULL);
#endif	
}

void * int_handler(void *arg){
        struct timespec sleepy,grumpy; 
        struct timeval t0,t1;
        unsigned long elapsed;
        int temp,count=0;
	sleepy.tv_sec=0;
	sleepy.tv_nsec=100000;

	memset(&interruptevent,0,sizeof(interruptevent));
#ifdef __QNX__
	ThreadCtl(_NTO_TCTL_IO, NULL);
	interruptevent.sigev_notify=SIGEV_INTR;
	intid=InterruptAttach(IRQ, isr_handler, NULL, NULL, NULL);
	while(1){
                if (writingFIFO) {
                  fprintf(stdout,"Waiting for write...");
		  InterruptWait(NULL, NULL);
                  nanosleep(&sleepy,&grumpy);
                  fprintf(stdout," Done\n");
                  fflush(stdout);
                  if (max_seq_count <= xfercount) {
                    fprintf(stderr,"Bad fifo condition\n");
                    writingFIFO=0;
                  } else {
		    if( (max_seq_count-xfercount) > FIFOLVL ){
			totransfer=FIFOLVL;
		    }
		    else{
			totransfer=max_seq_count-xfercount;
		    }
		    if(xfercount<max_seq_count){
                        int_count++;
                        gettimeofday(&int_times[int_count],NULL);
			DMAxfer(BASE0_dio, physical_addr[0]+4*xfercount, 0x14, 4*totransfer);
                        nanosleep(&sleepy,&grumpy);
			DMApoll(BASE0_dio);
			xfercount+=totransfer;
		    }
                    int_transfer[int_count]=totransfer;
                    int_xfer[int_count]=xfercount;
                    printf("Xfercount: %d %d :: %d %d\n",int_count,xfercount,int_times[int_count].tv_sec, int_times[int_count].tv_usec);
		    if(xfercount>=max_seq_count) {
                      while( ( in32(mmap_io_ptr_dio+0x04) & 0x00001000 ) != 0x00001000) delay(1); //wait for FIFO empty
                      //disable outputs
                      temp=in32(mmap_io_ptr_dio+0x04);
                      out32(mmap_io_ptr_dio+0x04, temp & 0xfffffeff);
                      writingFIFO=0;
                      printf("done with writing: %d\n",xfercount);
                    }
                  }
        	} else {
                 count++;
                 count=count %(int)1E5;
                 usleep(10);
                  if((count%(int)1E5)==0) {
                    //fprintf(stdout,"Not waiting for write\n");
                    fflush(stdout);   
                  }
                }

	}
#endif	
	
}

int main(){
    // DECLARE AND INITIALIZE ANY NECESSARY VARIABLES
//        unsigned char *code[MAX_RADARS][MAX_CHANNELS];
//        unsigned char *rep[MAX_RADARS][MAX_CHANNELS];
        int     maxclients=MAX_RADARS*MAX_CHANNELS;
        struct  ControlPRM  clients[maxclients],client ;
        struct  TSGbuf *pulseseqs[MAX_RADARS][MAX_CHANNELS][MAX_SEQS];
	unsigned int	*seq_buf[MAX_RADARS][MAX_CHANNELS];
        int seq_count[MAX_RADARS][MAX_CHANNELS];
        int old_pulse_index[MAX_RADARS][MAX_CHANNELS];
        int ready_index[MAX_RADARS][MAX_CHANNELS];
	unsigned int	*master_buf,	*readout_buf;
        int old_seq_id=-1;
        int new_seq_id=0;
        struct BadTR bad_transmit_times, bad_transmit_temp;
        unsigned int bad_transmit_counter=0;
	// receiver set-up variables
//	int 	scanstatus=0, size=0;
//	int	buffer=0, sample=0, metsample=0, debug=0, bandwidth=0;
//	int	Fpass=3333, Fstop=3333, tfreq=0;
//	float	freqout=3333, freqoutCD=50000;
//	int	*dataptr;
//	short   randval, I, Q;


	// socket and message passing variables
	int	data;
	char	datacode;
	int	rval;
        fd_set rfds,efds;
	// counter and temporary variables
	int	i,j,k,r,c,buf,index;
	int 	temp;
	int	tempint;
	char	tempchar;
	int	status;
	int	tempcode;
        struct timeval t0,t1;
        unsigned long elapsed;

	// function specific message variables
        int     numclients=0;
        struct  DriverMsg msg;
	// timing related variables
        struct timeval tv;
	struct	timespec	start, stop, sleep, now;
	float	ftime;
	int	clockresolution;
	time_t	tod;
#ifdef __QNX__
	struct	 _clockperiod 	new, old;

#endif
	// pci, io, and memory variables
	//unsigned char	*BASE0, *BASE1;
	unsigned int	BASE0[7], BASE1[7];
	unsigned int	*mmap_io_ptr;
	int		pci_handle;
	int		pci_device=0;

// PCI-7300A variables
	int		pci_handle_dio, IRQ_dio, mmap_io_dio;
        
	int		 pseq[7]={0, 3, 4, 6}, scope_sync[16384], TR[16384], TX[16384], TX_array[16384], 
                         trigger[16384], FIFOlevel[16384];
	int		 tau=2400, tperiod=1, tlength=300, time_array[10], intt=200, loopcount=0, fifocnt=0;

        unsigned long counter;
        signal(SIGINT, graceful_cleanup);
        signal(SIGTERM, graceful_cleanup);
        max_seq_count=0;
	if (verbose > 1) printf("Zeroing arrays\n");

	for (r=0;r<MAX_RADARS;r++){
	  for (c=0;c<MAX_CHANNELS;c++){
	    if (verbose > 1) printf("%d %d\n",r,c);
	    for (i=0;i<MAX_SEQS;i++) pulseseqs[r][c][i]=NULL;
            ready_index[r][c]=-1; 
            old_pulse_index[r][c]=-1; 
            seq_buf[r][c]=malloc(4*MAX_TIME_SEQ_LEN);
           
          } 
        }
        bad_transmit_times.length=0;
        bad_transmit_times.start_usec=malloc(sizeof(unsigned int)*MAX_PULSES);
        bad_transmit_times.duration_usec=malloc(sizeof(unsigned int)*MAX_PULSES);
       
#ifdef __QNX__
    // SET THE SYSTEM CLOCK RESOLUTION AND GET THE START TIME OF THIS PROCESS 
	// set the system clock resolution to 10 us
	new.nsec=10000;
	new.fract=0;
	temp=ClockPeriod(CLOCK_REALTIME,&new,0,0);
	if(temp==-1) 	perror("Unable to change system clock resolution");
	temp=ClockPeriod(CLOCK_REALTIME,0,&old,0);
	if(temp==-1) 	perror("Unable to read sytem time");
	clockresolution=old.nsec;
    /* OPEN THE PLX 9080 AND GET LOCAL BASE ADDRESSES */
	clock_gettime(CLOCK_REALTIME, &start);
	temp=_open_PLX9080(&BASE0_dio, &io_BASE1_dio, &BASE1_phys_dio, &pci_handle_dio, &mmap_io_dio, &IRQ_dio, 1);
	IRQ=IRQ_dio;
	printf("PLX9080 configuration IRQ: %d\n",IRQ);
	clock_gettime(CLOCK_REALTIME, &stop);
	if(temp==-1)	 fprintf(stderr, "PLX9080 configuration failed");
	fprintf(stderr," EXECUTION TIME: %d nsec \n", stop.tv_nsec-start.tv_nsec);
    /* CREATE DMA BUFFERS FOR ALL RECIEVER CHANNELS */
	clock_gettime(CLOCK_REALTIME, &start);
#endif

#ifdef __QNX__
	temp=_create_DMA_buff(&virtual_addr[0], &physical_addr[0], 4*MAX_TIME_SEQ_LEN);
	master_buf=virtual_addr[0];
	if (temp==-1){
	  fprintf(stderr, "ERROR MAKING DMA BUFFERS!\n");
        }
#else
                master_buf=malloc(4*MAX_TIME_SEQ_LEN);
#endif
readout_buf=malloc(4*MAX_TIME_SEQ_LEN);

#ifdef __QNX__
	clock_gettime(CLOCK_REALTIME, &stop);
	if (temp == 1)	fprintf(stderr, "DMA buffers created sucessfully!\n");
	fprintf(stderr, " EXECUTION TIME: %d nsec \n", stop.tv_nsec-start.tv_nsec);




    // INITIALIZE ARRAY FOR TIMING SEQUENCE TO NULL STATE

    // INITIALIZE TIMING CARD
	mmap_io_ptr_dio=mmap_io_dio;
	//disable input lines
	temp=	in32( mmap_io_ptr_dio+0x00);
		out32(mmap_io_ptr_dio+0x00, 0x00000040);
	//output is 32bits, timer0 is used, pattern gen disabled, etc
	temp=	in32( mmap_io_ptr_dio+0x04);
		out32(mmap_io_ptr_dio+0x04, 0x00000001);
	//clear fifo, and clear under-run status bit
	temp=	in32( mmap_io_ptr_dio+0x04);
		out32(mmap_io_ptr_dio+0x04, temp | 0x00000600);

	// SET UP 8254 TIMER CHIP
	out32(mmap_io_ptr_dio+0x2c, 0x00000000);	 //select timer0
	out32(mmap_io_ptr_dio+0x2c, 0x00000006);	 //select mode3, squarewave generator
	out32(mmap_io_ptr_dio+0x2c, 0x00000056);   	 //load counter1, mode3, LSB
	out32(mmap_io_ptr_dio+0x24, 10);		 // set counter1 to count 10 (1us)
	out32(mmap_io_ptr_dio+0x2c, 0x00000046);	 //release lsb of counter


	
	//set triggers to rising edge polarity	
	temp=	in32( mmap_io_ptr_dio+0x1c);
		out32(mmap_io_ptr_dio+0x1c, 0x00000000);	
	//wait for a trigger, terminations off
	temp=	in32( mmap_io_ptr_dio+0x04);
		out32(mmap_io_ptr_dio+0x04, temp | 0x00000040); //terminations off
	//set FIFO thresholds to 256
	out32(mmap_io_ptr_dio+0x18, ((256<<16) | 256) ); //set FIFO thresholds to 256
	out32(mmap_io_ptr_dio+0x18, ((256<<16) | 256) ); //set FIFO thresholds to 256
    // INITIALIZE INTERRUPTS
	// disable interrupts
	temp=	in32( mmap_io_ptr_dio+0x0c);
		out32(mmap_io_ptr_dio+0x0c, temp & 0xffffff00);	
	// start interrupt thread
//	pthread_create(&int_thread,NULL, int_handler, NULL);	
//	// enable interrupt on AUXDI0
//	temp=	in32( mmap_io_ptr_dio+0x0c);
//		out32(mmap_io_ptr_dio+0x0c, temp | 0x00000001);
#endif

    // OPEN TCP SOCKET AND START ACCEPTING CONNECTIONS 
	sock=tcpsocket(TIMING_HOST_PORT);
	listen(sock, 5);
	while (1) {
                rval=1;
		msgsock=accept(sock, 0, 0);
		if (verbose > 0) printf("accepting socket!!!!!\n");
		if( (msgsock==-1) ){
			perror("accept FAILED!");
			return EXIT_FAILURE;
		}
		else while (rval>=0){
                  /* Look for messages from external client process */
                  FD_ZERO(&rfds);
                  FD_SET(msgsock, &rfds); //Add msgsock to the read watch
                  FD_ZERO(&efds);
                  FD_SET(msgsock, &efds);  //Add msgsock to the exception watch
                  /* Wait up to five seconds. */
                  tv.tv_sec = 5;
                  tv.tv_usec = 0;
		  if (verbose > 1) printf("%d Entering Select\n",msgsock);
                  rval = select(msgsock+1, &rfds, NULL, &efds, &tv);
		  if (verbose > 1) printf("%d Leaving Select %d\n",msgsock,rval);
                  /* Don’t rely on the value of tv now! */
                  if (FD_ISSET(msgsock,&efds)){
                    if (verbose > 1) printf("Exception on msgsock %d ...closing\n",msgsock);
                    break;
                  }
                  if (rval == -1) perror("select()");
                  rval=recv(msgsock, &buf, sizeof(int), MSG_PEEK); 
                  if (verbose>1) printf("%d PEEK Recv Msg %d\n",msgsock,rval);
		  if (rval==0) {
                    if (verbose > 1) printf("Remote Msgsock %d client disconnected ...closing\n",msgsock);
                    break;
                  } 
		  if (rval<0) {
                    if (verbose > 0) printf("Msgsock %d Error ...closing\n",msgsock);
                    break;
                  } 
                  if ( FD_ISSET(msgsock,&rfds) && rval>0 ) {
                    if (verbose>1) printf("Data is ready to be read\n");
		    if (verbose > 1) printf("%d Recv Msg\n",msgsock);
                    rval=recv_data(msgsock,&msg,sizeof(struct DriverMsg));
                    datacode=msg.type;
		    if (verbose > 1) printf("\nmsg code is %c\n", datacode);
		    switch( datacode ){
		      case TIMING_REGISTER_SEQ:
		        if (verbose > 0) printf("\nRegister new timing sequence for timing card\n");	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
			if (verbose > 1) printf("Radar: %d, Channel: %d Beamnum: %d Status %d\n",
			  client.radar,client.channel,client.tbeam,msg.status);	
		        rval=recv_data(msgsock,&index,sizeof(index));
		        if (verbose > 1) printf("Requested index: %d\n",index);	
		        if (verbose > 1) printf("Attempting Free on pulseseq :p\n",pulseseqs[r][c][index]);	
                        if (pulseseqs[r][c][index]!=NULL) {
                          if (pulseseqs[r][c][index]->rep!=NULL) free(pulseseqs[r][c][index]->rep);
                          if (pulseseqs[r][c][index]->code!=NULL) free(pulseseqs[r][c][index]->code);
                          free(pulseseqs[r][c][index]);
                        }
		        if (verbose > 1) printf("Done Free - Attempting Malloc\n");	
                        pulseseqs[r][c][index]=malloc(sizeof(struct TSGbuf));
		        if (verbose > 1) printf("Finished malloc\n");	
                        rval=recv_data(msgsock,pulseseqs[r][c][index], sizeof(struct TSGbuf)); // requested pulseseq
                        pulseseqs[r][c][index]->rep=
                          malloc(sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        pulseseqs[r][c][index]->code=
                          malloc(sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        rval=recv_data(msgsock,pulseseqs[r][c][index]->rep, 
                          sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        rval=recv_data(msgsock,pulseseqs[r][c][index]->code, 
                          sizeof(unsigned char)*pulseseqs[r][c][index]->len);
			if (verbose > 1) printf("Pulseseq length: %d\n",pulseseqs[r][c][index]->len);	
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break;
		      case TIMING_CtrlProg_END:
		        if (verbose > 0) printf("\nA client is done\n");	
                        old_seq_id=-1;
                        break;
		      case TIMING_CtrlProg_READY:
		        if (verbose > 0) printf("\nAsking to set up timing info for client that is ready %d\n",numclients);	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
                        if ((ready_index[r][c]>=0) && (ready_index[r][c] <maxclients) ) {
                          clients[ready_index[r][c]]=client;
                        } else {
                          clients[numclients]=client;
                          ready_index[r][c]=numclients;
                          numclients=(numclients+1);
                        }
			if (verbose > 1) printf("Radar: %d, Channel: %d Beamnum: %d Status %d\n",
			  client.radar,client.channel,client.tbeam,msg.status);	
                        index=client.current_pulseseq_index; 
                        if (index!=old_pulse_index[r][c]) {
			  if (verbose > 1) printf("Need to unpack pulseseq\n");	
			  if (verbose > 1) printf("Pulseseq length: %d\n",pulseseqs[r][c][index]->len);	
			// unpack the timing sequence
			  seq_count[r][c]=0;
			  for(i=0;i<pulseseqs[r][c][index]->len;i++){
			    tempcode=_decodestate(r,c,pulseseqs[r][c][index]->code[i]);	
			    for( j=0;j<pulseseqs[r][c][index]->step*pulseseqs[r][c][index]->rep[i];j++){
			      seq_buf[r][c][seq_count[r][c]]=tempcode;
			      seq_count[r][c]++;
			    }
			  }
                        }
	                if (verbose > 1) printf("Timing Card seq length: %d state step: %lf time: %lf\n",
                                                seq_count[r][c],1E-6,1E-6*seq_count[r][c]);

                        if (numclients >= maxclients) msg.status=-2;
		        if (verbose > 1) printf("\nclient ready done\n");	
                        numclients=numclients % maxclients;
                        old_pulse_index[r][c]=index;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break; 

		      case TIMING_PRETRIGGER:
			if(verbose > 0 ) printf("Setup Timing Card for next trigger\n");	
		        if (verbose > 1) printf("Max Seq length: %d Num clients: %d\n",max_seq_count,numclients);	
                        gettimeofday(&t0,NULL);
                        new_seq_id=0;
	                for( i=0; i<numclients; i++) {
                          r=clients[i].radar-1;
                          c=clients[i].channel-1;
                          new_seq_id+=r*MAX_CHANNELS*MAX_SEQS +
                                      c*MAX_SEQS +
                                      clients[i].current_pulseseq_index;
                          if (verbose > 1) printf("r:%d c:%d index:%d new_id:%d\n",r,c,clients[i].current_pulseseq_index,new_seq_id);
                        }
                        if (verbose > 1) printf("Timing Driver: %d %d\n",new_seq_id,old_seq_id);

                        if (new_seq_id!=old_seq_id) { 
                          for (i=0;i<numclients;i++) {
                            r=clients[i].radar-1;
                            c=clients[i].channel-1;
                            if (seq_count[r][c]>=max_seq_count) max_seq_count=seq_count[r][c];
		            if (verbose > 1) printf("Max Seq length %d\n",max_seq_count);	
                            counter=0;
			    if (verbose > 1) printf("Merging Client Seq %d into Master Seq %d %d length:%d\n",
                                                    i,r,c,seq_count[r][c]);	
                            for (j=0;j<seq_count[r][c];j++) {
                              if (i==0) {
                                master_buf[j]=seq_buf[r][c][j];
                                counter++;
                              }
                              else  master_buf[j]|=seq_buf[r][c][j];
                            } 
                            if (verbose > 1 ) printf("Total Tr %d\n",counter);
			  }
			  // add the FIFO level bits
                          bad_transmit_times.length=0;
                          tr_event=0; 
                          scope_event=0;
                          fifo_count=0; 
	                  if (verbose > -1) printf("Fifo stamping Master Seq using FIFOLVL %d\n",FIFOLVL);	
			  for(i=0;i<max_seq_count;i++){
			    if( ((i%FIFOLVL)==0) && (i!=0)  ) {
	                        if (verbose > -1) printf("Fifo stamp: %d Master Seq: %d :: %d\n",fifo_count,i,FIFOLVL);	
                                fifo_count++;  
				for(j=0;j<10;j++){
                            		master_buf[i]|=0x80;
				}
                            }
                            if ((master_buf[i] & 0x02)==0x02) {
                                if (tr_event==0) { 
                                  if (verbose > 1 ) printf("Master TR sample start: %d %x\n",i,master_buf[i]); 
                                  bad_transmit_times.length++;
                                  if(bad_transmit_times.length > 0){ 
                                    if(bad_transmit_times.length < MAX_PULSES) { 
                                      bad_transmit_times.start_usec[bad_transmit_times.length-1]=i;
                                      bad_transmit_times.duration_usec[bad_transmit_times.length-1]=1;
                                    } else {
                                      printf("Too many transmit pulses\n");
                                    } 
                                  }
                                } else {
                                    bad_transmit_times.duration_usec[bad_transmit_times.length-1]++;
                                }
                                tr_event=1;
                            } else {
                                if(tr_event==1) 
                                  if (verbose > 1 ) printf("Master TR sample end: %d %x\n",i,master_buf[i]); 
                                tr_event=0;
                            }
                            if ((master_buf[i] & 0x01)==0x01) {
                                scope_event=1;
                                if (verbose > -1 ) printf("---> Scope Sync in Master %ld %ld\n",i,max_seq_count); 
                            } 
                          } //sequence loop i 
                          if (verbose > -1 ) printf("---> FIFO count in Master: %d\n",fifo_count); 
                          if (verbose > 1 ) {
                            if (scope_event==1) { 
                              if (verbose > -1 ) printf("---> Scope Sync in Master %ld\n",max_seq_count); 
                            } else {
                              if (verbose > 1 ) printf("XXX> Scope Sync in Master %ld\n",max_seq_count); 
                            }
                          }
                        }
	                if (verbose > 1) printf("seq length: %d state step: %lf time: %lf\n",
                                                max_seq_count,1E-6,(1E-6*max_seq_count));

                        max_seq_count=15000;
                        int_count=0;
			if (verbose > 1) printf("Max Seq Count:%d\n",max_seq_count);	
                        if (verbose > 1) printf("END FIFO Stamps\n");
#ifdef __QNX__
			// disable outputs
			temp=	in32( mmap_io_ptr_dio+0x04);
				out32(mmap_io_ptr_dio+0x04, temp & 0xfffffeff);
                        usleep(1000);
			// clear FIFO
			temp=	in32( mmap_io_ptr_dio+0x04);
				out32(mmap_io_ptr_dio+0x04, temp | 0x00000200);
                        usleep(1000); 

			if(max_seq_count>16384){
			    //xfercount=8192;
			    xfercount=15000;
                            gettimeofday(&int_times[0],NULL);
                            int_transfer[0]=xfercount;
                            int_xfer[0]=xfercount;
			    //DMAxfer(BASE0_dio, physical_addr[0], 0x14, 4*15000);
			    DMAxfer(BASE0_dio, physical_addr[0], 0x14, 4*xfercount);
			    DMApoll(BASE0_dio);
                            writingFIFO=1;
			} else {
			    xfercount=max_seq_count;
                            gettimeofday(&int_times[0],NULL);
                            int_transfer[0]=xfercount;
			    DMAxfer(BASE0_dio, physical_addr[0], 0x14, 4*xfercount);
			    DMApoll(BASE0_dio);
			}
	

#endif
                        old_seq_id=new_seq_id;
                        send_data(msgsock, &bad_transmit_times, sizeof(bad_transmit_times));
                        send_data(msgsock, bad_transmit_times.start_usec, 
                                  sizeof(unsigned int)*bad_transmit_times.length);
                        send_data(msgsock, bad_transmit_times.duration_usec, 
                                  sizeof(unsigned int)*bad_transmit_times.length);

			msg.status=0;
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) {
                          printf("Timing Pretrigger Elapsed Microseconds: %ld\n",elapsed);
                        }
                        if (verbose > 1)  printf("Ending Pretrigger Setup\n");
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break; 

		      case TIMING_TRIGGER:
                        gettimeofday(&t0,NULL);
			if (verbose > -1 ) printf("Setup Timing Card trigger\n");	
                        printf("  %d %d\n",t0.tv_sec,t0.tv_usec);  
			if (verbose > 1) printf("Read msg struct from tcp socket!\n");	

#ifdef __QNX__
			//enable outputs
	  		temp=	in32(mmap_io_ptr_dio+0x04); 
	                	out32(mmap_io_ptr_dio+0x04, ((temp | 0x00000100) & (~0x00000020))); 
#endif
                        usleep(900000); 	
			if (verbose > -1 ) printf("End Timing Card trigger\n");	
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break;

                      case TIMING_GPS_TRIGGER:
                        if (verbose > 0 ) printf("Setup Timing Card GPS trigger\n");
                        if (verbose > 1) printf("Read msg struct from tcp socket!\n");

#ifdef __QNX__
                        //enable outputs and wait for external trigger
                        temp=   in32(mmap_io_ptr_dio+0x04);
                        out32(mmap_io_ptr_dio+0x04, temp | 0x00000120);
#endif
                        
                        if (verbose > 1 ) printf("End Timing Card GPS trigger\n");
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break;
		      case TIMING_WAIT:
			if (verbose > 0 ) printf("Timing Card: Wait\n");	
			if (verbose > 1) printf("Read msg struct from tcp socket!\n");	
#ifdef __QNX__
	                while(writingFIFO==1) delay(1); //wait to finish writing FIFO
//			while( ( in32(mmap_io_ptr_dio+0x04) & 0x00001000 ) != 0x00001000) delay(1); //wait for FIFO empty 
//			//disable outputs
//	  		temp=	in32(mmap_io_ptr_dio+0x04); 
//	                	out32(mmap_io_ptr_dio+0x04, temp & 0xfffffeff); 
#endif
 		        if (verbose > -1 ) printf("Number of interrupts %d\n",int_count);	
                        for (i=0;i<int_count+1;i++) {
                          if(i==0) elapsed=0;
                          else {
                            elapsed=(int_times[i].tv_sec-int_times[i-1].tv_sec)*1E6;
                            elapsed+=(int_times[i].tv_usec-int_times[i-1].tv_usec);
                          }
                          //if (elapsed > 1.5*FIFOLVL)
 		            if (verbose > -1 ) printf("%4d :: Transfer: %d Total: %d Max: %d :: Elapsed Microseconds: %8ld \n",i,int_transfer[i],int_xfer[i],max_seq_count,elapsed);	
                          //if (elapsed < FIFOLVL)
 		            //if (verbose > -1 ) printf("%4d :: Elapsed Microseconds: %8ld \n",i,elapsed);	
                        }
                        numclients=0;
                        for (r=0;r<MAX_RADARS;r++){
                          for (c=0;c<MAX_CHANNELS;c++){
                            ready_index[r][c]=-1;
                          }
                        }
                        if (verbose > 1)  printf("Ending Wait\n");
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
			break;

		      default:
			if (verbose > 0) fprintf(stderr,"BAD CODE: %c : %d\n",datacode,datacode);
			break;
		    }
		  }	
		} 
		if (verbose > 0 ) fprintf(stderr,"Closing socket\n");
		close(msgsock);
	};

        return 1;
}
