#include <errno.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdarg.h>
#include <stdint.h>
#include <signal.h>
#include <math.h>
#include <netdb.h>
#include <string.h>
#include <time.h>
#include <fcntl.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fftw3.h>
#ifdef __QNX__
  #include <sys/iofunc.h>
  #include <sys/dispatch.h>
  #include <devctl.h>
  #include <sched.h>
  #include <process.h>
  #include <sys/iomsg.h>
  #include <sys/uio.h>
  #include <sys/resmgr.h>
  #include <sys/neutrino.h>
  #include <hw/inout.h>
  #include <hw/pci.h>
  #include <netinet/in.h>
  #include <netinet/tcp.h>
#endif
#include "control_program.h"
#include "global_server_variables.h"
#include "utils.h"
#include "gc314FS_defines.h"
#include "gc314FS.h"
#include "_prog_conventions.h"
#include "_regs_GC314FS.h"

#define IMAGING 0
#define BUFS 1
#define MAX_SAMPLES 262144 

int verbose=0;
int write_clr_file=1; 
FILE *clr_data;

int sock,msgsock;
FILE 		 *gc314fs[MAX_CARDS];
//unsigned int	 BASE0[MAX_CARDS], BASE1[MAX_CARDS], *BASE1_phys;
/*IMAGING VARIABLES*/
//unsigned int	 virtual_addr[3*MAX_CARDS], physical_addr[3*MAX_CARDS];
//unsigned int	 chanAaddresses[3*MAX_CARDS], *chanAdata_main[MAX_TRANSMITTERS], *chanAdata_back[MAX_BACK_ARRAY];
//unsigned int	 chanBaddresses[3*MAX_CARDS]; *chanBdata_main[MAX_TRANSMITTERS], *chanBdata_back[MAX_BACK_ARRAY];
//unsigned int	 chanCaddresses[3*MAX_CARDS]; *chanCdata_main[MAX_TRANSMITTERS], *chanCdata_back[MAX_BACK_ARRAY];
//unsigned int	 chanDaddresses[3*MAX_CARDS]; *chanDdata_main[MAX_TRANSMITTERS], *chanDdata_back[MAX_BACK_ARRAY];
/*MSI RADAR VARIABLES*/
//unsigned int	 channel_virt_addr[MAX_RADARS][MAX_CHANNELS], channel_phy_addr[MAX_RADARS][MAX_CHANNELS];
unsigned int     main_addresses[MAX_RADARS][MAX_CHANNELS][BUFS],back_addresses[MAX_RADARS][MAX_CHANNELS][BUFS],aux_addresses[MAX_RADARS][MAX_CHANNELS][BUFS];
unsigned int     main_physical[MAX_RADARS][MAX_CHANNELS][BUFS],back_physical[MAX_RADARS][MAX_CHANNELS][BUFS],aux_physical[MAX_RADARS][MAX_CHANNELS][BUFS];
unsigned int     *main_test_data[MAX_RADARS][MAX_CHANNELS][BUFS],*back_test_data[MAX_RADARS][MAX_CHANNELS][BUFS],*aux_test_data[MAX_RADARS][MAX_CHANNELS][BUFS];
int armed=0;
int main(int argc, char **argv){
	// socket and message passing variables
        struct  timeval tv;
	char	datacode;
	int	rval;
        fd_set rfds,efds;
        int status,configured=0;
        short I,Q;
	// counter and temporary variables
	int	temp,buf,r,c,i,ii,j,n,b,N;
        unsigned int utemp;
        struct  DriverMsg msg;
        struct CLRFreqPRM clrfreq_parameters;
        unsigned int *main;
        int  maxclients=MAX_RADARS*MAX_CHANNELS;
        int numclients=0;
        int ready_index[MAX_RADARS][MAX_CHANNELS];
        struct  ControlPRM  clients[maxclients],client;
        struct timeval t0,t1,t2,t3;
        unsigned long elapsed;
        int card=0;
	char *driver0;
	char *driver1;
        char *driver;
        char shm_device[80];
        int shm_fd;
        int shm_memory=0;
	char cardnum[1];
        int frame_counter=1;
        unsigned int CLOCK_RES;
        int pci_handle, pci_handle_dio,IRQ;
        int samples;
        fftw_complex *in=NULL, *out=NULL;
        double *pwr=NULL,*pwr2=NULL;
        fftw_plan plan;
        double bandwidth;
        int centre,start,end;
#ifdef __QNX__
	struct	 _clockperiod 	new, old;
#endif
        for (r=0;r<MAX_RADARS;r++){
          for (c=0;c<MAX_CHANNELS;c++){
            ready_index[r][c]=-1;
          }
        }
#ifdef __QNX__
   /* SET UP COMMUNICATION TO GC314 DRIVERS */
        configured=1;
        if(IMAGING==1) {
          if (MAX_CARDS < (MAX_TRANSMITTERS+MAX_BACK_ARRAY+1)) {
	    fprintf(stderr, "Too few cards configured for imaging radar configuration\n");
            configured=0;
          }
        } else {
          if (MAX_CARDS < MAX_RADARS/2) {
	    fprintf(stderr, "Too few cards configured for MSI radar configuration\n");
            configured=0;
          }
        }
        if (verbose > 0 ) printf("Opening block devices for each GC314 card\n");
	for(i=0;i<MAX_CARDS;i++){
		driver=calloc((size_t) 64, 1);
		strcat(driver,"/dev/gc314fs-");
                //card=MAX_CARDS-1-i;
                card=i;
		itoa(i,cardnum,10);
		strcat(driver,cardnum);
		//printf("opening %s\n", driver);
	  	gc314fs[card]=(FILE *)open(driver, O_RDWR);
		// chec for error opening gc314fs
		if( (int)(gc314fs[card]) < 0 ){
			fprintf(stderr, "Unable to open driver %s: %s\n", driver, strerror(errno));
                        configured=0;
		}
                if (card==0) driver0=driver;
                if (card==1) driver1=driver;
		//free(driver);
	}
#endif
#ifdef __QNX__
    /* SET THE SYSTEM CLOCK RESOLUTION AND GET THE START TIME OF THIS PROCESS */
	// set the system clock resolution to 10 us
	new.nsec=10000;
	new.fract=0;
	temp=ClockPeriod(CLOCK_REALTIME,&new,0,0);
	if(temp==-1) 	perror("Unable to change system clock resolution");
	temp=ClockPeriod(CLOCK_REALTIME,0,&old,0);
	if(temp==-1) 	perror("Unable to read sytem time");
	CLOCK_RES=old.nsec;
    /* OPEN THE PLX9656 AND GET LOCAL BASE ADDRESSES */
        if (configured) {
//          if (verbose > 0 ) printf("Opening PLX9656 on each card\n");
//	  for (i=0;i<MAX_CARDS;i++){
//		temp=_open_PLX9656(&BASE0[i], &BASE1[i], &pci_handle, &IRQ, i);
//		if(temp==-1)	 fprintf(stderr, "PLX9695 configuration failed: Card %d\n", i);
//		else 		 fprintf(stderr, "PLX9656 configuration successful: Card %d\n", i);
//	  }
          if(IMAGING==1) {
//    /* CREATE DMA BUFFERS FOR ALL RECIEVER CHANNELS */
//	    for (i=0;i<3*MAX_CARDS;i++){
//		temp=_create_DMA_buff(&virtual_addr[i], &physical_addr[i], 4*MAX_SAMPLES);
//		if (temp==-1){
//			fprintf(stderr, "ERROR MAKING DMA BUFFERS!\n");
//			break;
//		}
//	    }
//	    if (temp == 1)	fprintf(stderr, "DMA buffers created sucessfully!\n");
//    /* CALCULATE AND SET THE PARAMETERS OF THE GC4016s */
//    /* SET UP GC4016s for data collection */
//	    n=0;
//	    for(i=0;i<MAX_CARDS;i++){
//		for(j=0;j<3;j++){
//			chanAaddresses[n]=gc314GetBufferAddress(gc314fs[i], j, CHANNEL_A);	
//			chanBaddresses[n]=gc314GetBufferAddress(gc314fs[i], j, CHANNEL_B);	
//			chanCaddresses[n]=gc314GetBufferAddress(gc314fs[i], j, CHANNEL_C);	
//			chanDaddresses[n]=gc314GetBufferAddress(gc314fs[i], j, CHANNEL_D);	
//			printf("Channel A, chip %d  =  %x\n", j, chanAaddresses[n]);
//			n++;
//		}
//	    }
//	    for(i=0;i<16;i++){
//		chanAdata_main[i]=chanAaddresses[i];
//		chanBdata_main[i]=chanBaddresses[i];
//		chanCdata_main[i]=chanCaddresses[i];
//		chanDdata_main[i]=chanDaddresses[i];
//	    }
//	    for(i=0;i<4;i++){
//		chanAdata_back[i]=chanAaddresses[16+i];
//		chanBdata_back[i]=chanBaddresses[16+i];
//		chanCdata_back[i]=chanCaddresses[16+i];
//		chanDdata_back[i]=chanDaddresses[16+i];
//	    }
          } else {
            if (verbose > 0 ) printf("Setting up for Multi-site Radar\n");
	    for(r=0;r<MAX_RADARS;r++){
	      for(c=0;c<MAX_CHANNELS;c++){
//JDS - Todd says I dont need this DMA cruft
//                if (verbose > 0 ) printf("Creating DMA_buf r:%d c:%d\n",r,c);
//		temp=_create_DMA_buff(&channel_virt_addr[r][c], &channel_phy_addr[r][c], 4*MAX_SAMPLES);
//		if (temp==-1){
//			fprintf(stderr, "ERROR MAKING DMA BUFFERS!\n");
//			break;
//		}
//JDS - NEED to convert driver to double buffer
//	        for(b=0;b<BUFS+1;b++){
//		  main_addresses[r][c][b]=gc314GetBufferAddress(gc314fs[card], 0, c, b);	
//		  back_addresses[r][c][b]=gc314GetBufferAddress(gc314fs[card], 1, c, b);	
//		  aux_addresses[r][c][b]=gc314GetBufferAddress(gc314fs[card],  2, c, b);	
//                }
//JDS Only one card for now so force it 
                card=r;
                if (verbose > -1 ) printf("Get Buf Address card: %d  r:%d c:%d\n",card,r,c);
  		main_addresses[r][c][0]=gc314GetBufferAddress(&main_physical[r][c][0],gc314fs[card], 2, c);	
		back_addresses[r][c][0]=gc314GetBufferAddress(&back_physical[r][c][0],gc314fs[card], 1, c);	
		aux_addresses[r][c][0]=gc314GetBufferAddress(&aux_physical[r][c][0],gc314fs[card],  0, c);	
                //printf("%d %d %d :: Physical Addresses: %x %x %x\n",r,c,0,main_physical[r][c][0],back_physical[r][c][0],aux_physical[r][c][0]);
              }
            } 
          }
        } else {
	    //printf("Filling Test Data Arrays\n");
            shm_memory=1;
	    for(r=0;r<MAX_RADARS;r++){
	      for(c=0;c<MAX_CHANNELS;c++){

                  sprintf(shm_device,"/receiver_main_%d_%d_%d",r,c,0);
                  //printf("%s ",shm_device);
                  shm_unlink(shm_device);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  //if (shm_fd == -1) printf("shm_open error\n");
                  //printf("%d \n",shm_fd);
                  if (ftruncate(shm_fd, MAX_SAMPLES*4) == -1) fprintf(stderr,"ftruncate error\n");

                  //printf("%d \n",shm_fd);
                  main_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  sprintf(shm_device,"/receiver_back_%d_%d_%d",r,c,0);
                  //printf("%s ",shm_device);
                  shm_unlink(shm_device);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  ftruncate(shm_fd, MAX_SAMPLES*4);
                  back_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  sprintf(shm_device,"/receiver_aux_%d_%d_%d",r,c,0);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  ftruncate(shm_fd, MAX_SAMPLES*4);
                  aux_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  for (i=0;i<MAX_SAMPLES;i++) {
                    main_test_data[r][c][0][i]=i;	
		    back_test_data[r][c][0][i]=i;	
		    aux_test_data[r][c][0][i]=i;	

                  } 
              }
            }
        }

//	temp=setprio(0,20);
#else
            shm_memory=1;
	    //printf("Filling Test Data Arrays\n");
	    for(r=0;r<MAX_RADARS;r++){
	      for(c=0;c<MAX_CHANNELS;c++){
                  sprintf(shm_device,"/receiver_main_%d_%d_%d",r,c,0);
                  //printf("%s ",shm_device);
                  shm_unlink(shm_device);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  if (shm_fd == -1) fprintf(stderr,"shm_open error\n");                 
                  //printf("%d \n",shm_fd);
                  if (ftruncate(shm_fd, MAX_SAMPLES*4) == -1) fprintf(stderr,"ftruncate error\n");                 

                  //printf("%d \n",shm_fd);
                  main_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  sprintf(shm_device,"/receiver_back_%d_%d_%d",r,c,0);
                  //printf("%s ",shm_device);
                  shm_unlink(shm_device);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  ftruncate(shm_fd, MAX_SAMPLES*4);
                  back_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  sprintf(shm_device,"/receiver_aux_%d_%d_%d",r,c,0);
                  shm_fd=shm_open(shm_device,O_RDWR|O_CREAT,S_IRUSR | S_IWUSR);
                  ftruncate(shm_fd, MAX_SAMPLES*4);
                  aux_test_data[r][c][0]=mmap(0,MAX_SAMPLES*4,PROT_READ|PROT_WRITE,MAP_SHARED,shm_fd,0);
                  close(shm_fd);
                  for (i=0;i<MAX_SAMPLES;i++) {
  		    main_test_data[r][c][0][i]=i;	
		    back_test_data[r][c][0][i]=i;	
		    aux_test_data[r][c][0][i]=i;	
                  } 
              }
            }

#endif


    // OPEN TCP SOCKET AND START ACCEPTING CONNECTIONS 
	sock=tcpsocket(RECV_HOST_PORT);
	listen(sock, 5);
	while (1) {
                rval=1;
		msgsock=accept(sock, 0, 0);
		if (verbose > 0) printf("accepting socket!!!!!\n");
		if( (msgsock==-1) ){
			perror("accept FAILED!");
			return EXIT_FAILURE;
		}
		else while (rval>=0){
                  /* Look for messages from external client process */
                  FD_ZERO(&rfds);
                  FD_SET(msgsock, &rfds); //Add msgsock to the read watch
                  FD_ZERO(&efds);
                  FD_SET(msgsock, &efds);  //Add msgsock to the exception watch
                  /* Wait up to five seconds. */
                  tv.tv_sec = 5;
                  tv.tv_usec = 0;
		  if (verbose > 2) printf("%d Entering Select\n",msgsock);
                  rval = select(msgsock+1, &rfds, NULL, &efds, &tv);
		  if (verbose > 2) printf("%d Leaving Select %d\n",msgsock,rval);
                  /* Don’t rely on the value of tv now! */
                  if (FD_ISSET(msgsock,&efds)){
                    if (verbose > 1) printf("Exception on msgsock %d ...closing\n",msgsock);
                    break;
                  }
                  if (rval == -1) perror("select()");
                  rval=recv(msgsock, &buf, sizeof(int), MSG_PEEK); 
                  if (verbose>2) printf("%d PEEK Recv Msg %d\n",msgsock,rval);
		  if (rval==0) {
                    if (verbose > 1) printf("Remote Msgsock %d client disconnected ...closing\n",msgsock);
                    break;
                  } 
		  if (rval<0) {
                    if (verbose > 0) printf("Msgsock %d Error ...closing\n",msgsock);
                    break;
                  } 
                  if ( FD_ISSET(msgsock,&rfds) && rval>0 ) {
                    if (verbose>2) printf("Data is ready to be read\n");
		    if (verbose > 2) printf("%d Recv Msg\n",msgsock);
                    rval=recv_data(msgsock,&msg,sizeof(struct DriverMsg));
                    datacode=msg.type;
		    if (verbose > 2) printf("\nmsg code is %c\n", datacode);

		    switch( datacode ){
                      case RECV_CtrlProg_END:
                        if (verbose > 1) printf("RECV driver: Closing a control program\n");
                        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1;
                        c=client.channel-1;
                        card=r;
                        gc314ChannelAbort(gc314fs[card], c);

                        break;

		      case RECV_CtrlProg_READY:
                        gettimeofday(&t0,NULL);
		        if (verbose > 1) printf("\nAsking to set up receiver for client that is ready\n");	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
                        if(IF_ENABLED) client.rfreq=(-SAMPLE_FREQ+IF_FREQ); 
                        if ((ready_index[r][c]>=0) && (ready_index[r][c] <maxclients) ) {
                          clients[ready_index[r][c]]=client;
                        } else {
                          clients[numclients]=client;
                          ready_index[r][c]=numclients;
                          numclients++;
                        }
			if (verbose > 1) printf("  Radar: %d, Channel: %d Beamnum: %d Status %d\n",
			  client.radar,client.channel,client.rbeam,msg.status);	
                        if (numclients >= maxclients) msg.status=-2;
		        if (verbose > 1) printf("\nclient ready done\n");	
                        numclients=numclients % maxclients;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) printf("  Receiver Client Ready Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1)  printf("Ending Client Ready Setup\n");
                        break; 

		      case RECV_PRETRIGGER:
                        gettimeofday(&t0,NULL);
			if(verbose > -1 ) printf("Setup Receiver Card for next trigger\n");	
                        if (configured) {
                          if (IMAGING==0) {
                          //MSI
			    for(i=0;i<numclients;i++){
                              r=clients[i].radar-1; 
                              c=clients[i].channel-1; 
                              b=0; 
                              card=r;
                              //if(card==0) printf("Using Driver File: %s\n",driver0);
                              //if(card==1) printf("Using Driver File: %s\n",driver1);
			      if(verbose > 0 ) printf("Set up card parameters fr client: %d r: %d c: %d\n",i,r,c);	
//JDS - NEED to convert driver to double buffer
//                              b=client.buffer_index; 
//			      gc314SetDMABuffer(gc314fs[card], c, b);
			      if(verbose > 0 ) printf("%d Setup filters %d %d\n",
                                                 i,(int) clients[i].filter_bandwidth,clients[i].match_filter);	
			      gc314SetFilters(gc314fs[card], (int) clients[i].filter_bandwidth, c, clients[i].match_filter);
			      if(verbose > 0 ) printf("%d Setup output rate %lf\n",i,(double) clients[i].baseband_samplerate);	
			      gc314SetOutputRate(gc314fs[card], (double) clients[i].baseband_samplerate, c);
			      if(verbose > 0 ) printf("%d Setup freq %d\n",i,clients[i].rfreq*1000);	
			      gc314SetFrequency(gc314fs[card], clients[i].rfreq*1000, c);
			      if(verbose > 0 ) printf("%d update channel\n",i);	
			      gc314UpdateChannel(gc314fs[card], c);
			      if(verbose > 0 ) printf("%d Setup samples\n",i);	
			      gc314SetSamples(gc314fs[card], clients[i].number_of_samples+RECV_SAMPLE_HEADER, c);
			    }
			    if(verbose > 0 ) printf("Done with client parameters\n");	
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("Setup external trigger on card %d\n",i);	
                              gc314SetExternalTrigger(gc314fs[i], GC314_ON);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("set sync mask on card %d\n",i);	
			      //gc314SetSyncMask(gc314fs[i], SYNC1_SIA_ONETIME);
			      //gc314SetSyncMask(gc314fs[i], SYNC1_SIA_HOLD);
			      //gc314SetSyncMask(gc314fs[i],  SYNC1_RTSC_CLEAR);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("Sync1 ON on card %d\n",i);	
			      //gc314SetSync1(gc314fs[i], GC314_ON);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("set global reset to ON on card %d\n",i);	
			      gc314SetGlobalReset(gc314fs[i], GC314_ON);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("set load gc4016 on card %d\n",i);	
			      gc314LoadGC4016s(gc314fs[i]);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("Sync1 ON on card %d\n",i);	
			      //gc314SetSync1(gc314fs[i], GC314_ON);
			      gc314SetSyncMask(gc314fs[i], SYNC1_SIA_HOLD);
                            }
			    for(i=0;i<MAX_CARDS;i++) {
			      if(verbose > 0 ) printf("set global reset to OFF on card %d\n",i);	
			      gc314SetGlobalReset(gc314fs[i], GC314_OFF);
                            }
			    //for(i=0;i<MAX_CARDS;i++) {
			    //  if(verbose > 0 ) printf("Sync1 OFF on card %d\n",i);	
			    //  gc314SetSync1(gc314fs[i], GC314_OFF);
                            //} 
			    if(verbose > 0 ) printf("Set RDA for each client\n");	
			    for(i=0;i<numclients;i++){
                              r=clients[i].radar-1; 
                              c=clients[i].channel-1; 
//JDS force card to 0 for testing
                              card=r;
			      gc314SetRDA(gc314fs[card], c);
                              gettimeofday(&t1,NULL);
			      if(verbose > -1 ) printf("%d Set RDA: %d %d Frame: %d Time: %d %d\n",i,card,c,frame_counter,t1.tv_sec,t1.tv_usec);
                              frame_counter++;	
                            }
			    if(verbose > 0 ) printf("Set Channel On for each client\n");	
			    for(i=0;i<numclients;i++){
                              r=clients[i].radar-1; 
                              c=clients[i].channel-1; 
//JDS force card to 0 for testing
                              card=r;
			      gc314ChannelOn(gc314fs[card], c);
			    }
			    if(verbose > 0 ) printf("start collection  on all cards\n");	
			    for(i=0;i<MAX_CARDS;i++) {
                              //printf("Start Collection on Card %d %d\n",i,gc314fs[i]);
                              gc314StartCollection(gc314fs[i]);
/*   Use this for software trigger */
//			      gc314SetSync1(gc314fs[i], GC314_PULSE);
                            }			
			    if(verbose > 0 ) printf("set sync mask on all cards\n");	
			    //for(i=0;i<MAX_CARDS;i++) {
                            //  gc314SetSyncMask(gc314fs[i], SYNC1_SIA_ONETIME);
                            //  gc314SetSyncMask(gc314fs[i],  SYNC1_RTSC_CLEAR);
                            //}
                          } else {
                          //IMAGING
                            msg.status=0;
                          } 
                        }
                        armed=1;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) printf("  Receiver Pre-trigger Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1)  printf("Ending Pretrigger Setup\n");
                        break; 

		      case RECV_POSTTRIGGER:
                        gettimeofday(&t0,NULL);
			if(verbose > 0 ) printf("Receiver post-trigger\n");	
                        armed=0;
                        numclients=0;
                        for (r=0;r<MAX_RADARS;r++){
                          for (c=0;c<MAX_CHANNELS;c++){
                            ready_index[r][c]=-1;
                          }
                        }

                        msg.status=0;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) printf("  Receiver Post-trigger Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1)  printf("Ending Post-trigger\n");
                        break;

		      case RECV_GET_DATA:
                        gettimeofday(&t0,NULL);
			if(verbose > 1 ) printf("Receiver get data\n");	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
                        card=r; 
			if(verbose > 1 ) printf("  radar: %d channel: %d\n",client.radar,client.channel);	
                        b=0; 
			if(verbose > 1 ) printf("  SHM Memory: %d\n",shm_memory);	
                        rval=send_data(msgsock,&shm_memory,sizeof(shm_memory));
			if(verbose > 1 ) printf("  FRAME Offset: %d\n",RECV_SAMPLE_HEADER);	
                        temp=RECV_SAMPLE_HEADER;
                        rval=send_data(msgsock,&temp,sizeof(temp));
			if(verbose > 1 ) printf("  DMA Buf: %d\n",b);	
                        rval=send_data(msgsock,&b,sizeof(b));
//JDS - NEED to convert driver to double buffer
//                        b=client.buffer_index; 
                        samples=client.number_of_samples;
                        rval=send_data(msgsock,&samples,sizeof(samples));
			if(verbose > 0 ) printf("Sent Number of Samples %d\n",samples);	
			if(verbose > 0 ) printf("r: %d c: %d\n",r,c);	
                        if (IMAGING==0) {
                          if (configured) {
                            //printf("Wait for Data on Card: %d Fd: %d channel: %d\n",card,gc314fs[card],c);
			    gc314WaitForData(gc314fs[card], c);
			    if(verbose > 0 ) printf("Send physical addresses%p %p\n",main_physical[card][c][b],back_physical[card][c][b]);	
                            main=main_addresses[card][c][b];
//                            for (i=100;i<120;i++) {
//                              I=(main[i] & 0xffff0000) >> 16;
//                              Q=main[i] & 0x0000ffff;
//                              if (verbose > 1) printf("        Data index: %d I: %d Q: %d\n",i,I,Q);
//                            }
			    rval=send_data(msgsock,&main_physical[card][c][b],sizeof(unsigned int));
			    rval=send_data(msgsock,&back_physical[card][c][b],sizeof(unsigned int));
                          } else {
			    if(verbose >0) printf("Send shm addresses %p %p\n",main_test_data[card][c][0],back_test_data[card][c][0]);	
                            utemp=0;
			    rval=send_data(msgsock,&temp,sizeof(utemp));
			    rval=send_data(msgsock,&temp,sizeof(utemp));
			    if(verbose > 0 ) printf("Data sent\n");	
                          }
                        } else {

                        }
                        numclients=0;
                        msg.status=0;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) printf("  Receiver Get Data Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1)  printf("Ending Post-trigger\n");
                        break;

                      case RECV_CLRFREQ:
                        if(verbose > 1 ) gettimeofday(&t0,NULL);
			if(verbose > 1 ) printf("Clear Frequency Search\n");	
			rval=recv_data(msgsock,&clrfreq_parameters, sizeof(struct CLRFreqPRM));

                        centre=(clrfreq_parameters.end+clrfreq_parameters.start)/2;
                        bandwidth=clrfreq_parameters.end-clrfreq_parameters.start;
			if(verbose > 1 ) printf("requested values\n");	
			if(verbose > 1 ) printf("start: %d\n",clrfreq_parameters.start);	
			if(verbose > 1 ) printf("end: %d\n",clrfreq_parameters.end);	
			if(verbose > 1 ) printf("centre: %d\n",centre);	
			if(verbose > 1 ) printf("bandwidth: %lf in Khz\n",bandwidth);	
			if(verbose > 1 ) printf("nave: %d\n",clrfreq_parameters.nave);	

/*
*  Set up fft variables
*/
                        N=(int)pow(2,ceil(log10(1.25*(float)bandwidth)/log10(2)));
                        if(N>1024){
                          N=512;
                          bandwidth=300;
                          start=(int)(centre-bandwidth/2+0.49999);
                          end=(int)(centre+bandwidth/2+0.49999);
                        }
/* 1 kHz fft boundaries*/
                        bandwidth=N;            
                        start=(int)(centre-bandwidth/2+0.49999);
                        end=(int)(centre+bandwidth/2+0.49999);
			if(verbose > 1 ) printf("final values\n");	
			if(verbose > 1 ) printf("start: %d\n",start);	
			if(verbose > 1 ) printf("end: %d\n",end);	
			if(verbose > 1 ) printf("centre: %d\n",centre);	
			if(verbose > 1 ) printf("bandwidth: %lf in Khz\n",bandwidth);	
			if(verbose > 1 ) printf("N: %d\n",N);	
  
			if(verbose > 1 ) printf("Malloc fftw_complex arrays %d\n",N);	
                        if(in!=NULL) free(in);
                        in = (fftw_complex*) fftw_malloc(sizeof(fftw_complex) *N);
                        if(out!=NULL) free(out);
                        out = (fftw_complex*) fftw_malloc(sizeof(fftw_complex)*N);
                        if(pwr!=NULL) free(pwr);
                        pwr = (double*) malloc(sizeof(double)*N);
                        if(pwr2!=NULL) free(pwr2);
                        pwr2 = (double*) malloc(sizeof(double)*N);
			if(verbose > 1 ) printf("Malloc fftw_complex arrays %p %p\n",in,out);	
			if(verbose > 1 ) printf("Build Plan\n");	
                        plan = fftw_plan_dft_1d(N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
                        for (i=0;i<N;i++) {
                          pwr[i]=0;
                        }
                        msg.status=1;
		        if(verbose > 1 ) printf("Nave %d\n",clrfreq_parameters.nave);	
                        for(ii=0;ii<clrfreq_parameters.nave;ii++) {
                          if(verbose > 1 ) gettimeofday(&t2,NULL);
		          if(verbose > 1 ) printf("Iter: %d\n",ii);	
#ifdef __QNX__
//do the hardware sampling here.
//JDS - NEED to convert driver to double buffer
//                              b=client.buffer_index; 
//			      gc314SetDMABuffer(gc314fs[r], c, b);
//JDS Force Card index to 0 for testing 
                          if(!armed){
                            r=0;
                            c=0;
                            card=r;
                            b=0; 
                            if(ii==0) {
			      if(verbose > 1 ) printf("%d Setup filters %d %d\n",
                                                 ii,(int) bandwidth,0);	
			      gc314SetFilters(gc314fs[card], (int) bandwidth*1000, c, 0); //no match filter
			      if(verbose > 1 ) printf("%d Setup output rate %lf in KHz\n",i,(double) bandwidth);	
			      gc314SetOutputRate(gc314fs[card], (double) bandwidth*1000, c);
			      if(verbose > 1 ) printf("%d Setup freq %d\n",i,centre*1000);	
			      gc314SetFrequency(gc314fs[card], centre*1000, c);
			      if(verbose > 1 ) printf("%d update channel\n",ii);	
			      gc314UpdateChannel(gc314fs[card], c);
			      if(verbose > 1 ) printf("%d Setup samples\n",ii);	
			      gc314SetSamples(gc314fs[card], N+RECV_SAMPLE_HEADER, c);
			      if(verbose > 1 ) printf("Done with client parameters\n");	
			      if(verbose > 1 ) printf("Setup external trigger off sync master only\n");	
			      gc314SetExternalTrigger(gc314fs[card], GC314_OFF);
			      if(verbose > 1 ) printf("set sync mask on all cards\n");	
			      gc314SetSyncMask(gc314fs[card], SYNC1_SIA_ONETIME);
			      if(verbose > 1 ) printf("Sync1 ON on all cards\n");	
			      gc314SetSync1(gc314fs[card], GC314_ON);
			      if(verbose > 1 ) printf("set global reset on all cards ON\n");	
			      gc314SetGlobalReset(gc314fs[card], GC314_ON);
			      if(verbose > 1 ) printf("set load gc4016 on all cards\n");	
			      gc314LoadGC4016s(gc314fs[card]);
			      if(verbose > 1 ) printf("set global reset on all cards OFF\n");	
			      gc314SetGlobalReset(gc314fs[card], GC314_OFF);
			      if(verbose > 1 ) printf("Sync1 OFF on all cards\n");	
			      gc314SetSync1(gc314fs[card], GC314_OFF);
                            }
			      if(verbose > 1 ) printf("Set RDA for channel\n");	
			      gc314SetRDA(gc314fs[card], c);
			      if(verbose > 1 ) printf("set sync mask on all cards\n");	
			      gc314SetSyncMask(gc314fs[card], SYNC1_SIA_ONETIME);
			    if(verbose > 1 ) printf("Set Channel On\n");	
//JDS force card to 0 for testing
			    gc314ChannelOn(gc314fs[card], c);
			    if(verbose > 1 ) printf("start collection  on all cards\n");	
			    gc314StartCollection(gc314fs[card]);
			    gc314SetSync1(gc314fs[card], GC314_PULSE);
                            if (verbose >1) { 
                              gettimeofday(&t3,NULL);
                              elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                              elapsed+=(t3.tv_usec-t2.tv_usec);
                              printf("Receiver: ClrFreq Iteration %d Card setup %d FFT Input Elapsed Microseconds: %ld\n",ii,N,elapsed);
                            }
                            if(verbose > 1 ) gettimeofday(&t2,NULL);
			    gc314WaitForData(gc314fs[card], c);
                            if (verbose > 1) { 
                              gettimeofday(&t3,NULL);
                              elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                              elapsed+=(t3.tv_usec-t2.tv_usec);
                              printf("  Receiver: ClrFreq Iteration %d Wait for data %d FFT Input Elapsed Microseconds: %ld\n",ii,N,elapsed);
                            }
                            if(verbose > 1 ) gettimeofday(&t2,NULL);

//#ifdef POOP
                            main=main_addresses[card][c][b];
                            for (j=0;j<N;j++) {
                              if(REVERSE_IQ_ORDER) {
                                Q=(main[j+RECV_SAMPLE_HEADER] & 0xffff0000) >> 16;
                                I=main[j+RECV_SAMPLE_HEADER] & 0x0000ffff;
                              } else {
                                I=(main[j+RECV_SAMPLE_HEADER] & 0xffff0000) >> 16;
                                Q=main[j+RECV_SAMPLE_HEADER] & 0x0000ffff;
                              }
                              in[j][0]=Q;
                              in[j][1]=I;
                            }
//#else
//                            for(j=0;j<N;j++) {
//                              in[j][0]=1;
//                              in[j][1]=0;
//                            }
//#endif
                            if (verbose > 1) { 
                              gettimeofday(&t3,NULL);
                              elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                              elapsed+=(t3.tv_usec-t2.tv_usec);
                              printf("    Receiver: ClrFreq Iteration %d Fill %d FFT Input Elapsed Microseconds: %ld\n",ii,N,elapsed);
                            }
                          } else {
                        //if armed set an error condition
                            msg.status=-1;
                          }
#else
			  if(verbose > 0 ) printf("Fill In array %p\n",in);	
                          for (j=0;j<N;j++) {
  		            in[j][0]=1;	
  		            in[j][1]=0;	
                          }
#endif
                          if (msg.status) {
                            if(verbose > 1 ) gettimeofday(&t2,NULL);
                            fftw_execute(plan);
/* calculate power from output of fft */
                            for (j=0;j<N;j++) {
                              pwr[j]+=sqrt(out[j][0]*out[j][0]+out[j][1]*out[j][1])/(double)N;
                            }
			    if(verbose > 10 ) {  printf("FFT Out/pwr\n");	
                              for (j=0;j<N;j++) {
                                printf("%d :: Out: %lf %lf  pwr: %lf\n",j,out[j][0],out[j][1],pwr[j]);
                              }
                            }
                            if (verbose > 1) { 
                              gettimeofday(&t3,NULL);
                              elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                              elapsed+=(t3.tv_usec-t2.tv_usec);
                              printf("      Receiver: ClrFreq Iteration %d Calculate %d FFT Elapsed Microseconds: %ld\n",ii,N,elapsed);
                            }

                          }
                        } //end of nave loop

/* take average power for nave number of calculations */
                        if(verbose > 1 ) printf("Average pwr\n");	
                        for(i=0;i<N;i++) pwr[i]=pwr[i]/(clrfreq_parameters.nave);
  /* Re-arrange the output of the fft to go from start to end (fftshift).
     This centers the fft, so now the first element in pwr2 corresponds
     with the start freq, and goes up to the end freq
  */
                        if(verbose > 0 ) printf("Reorder pwr\n");	
                        for(i=0;i<(N/2);i++){
                          pwr2[N/2+i]=pwr[i];
                          pwr2[i]=pwr[N/2+i];
                        }
                        if(verbose > 0 ) {
                          printf("fft power\n");	
                          printf(": Index : Freq : Shifted\n");	
                          if(write_clr_file) 
                            clr_data=fopen("/tmp/clr_data.txt","w+");  
                            fprintf(clr_data,": Index : Freq : Shifted\n");	
                          for(i=0;i<N;i++){
                            printf("%4d: %8d %8.3lf\n",i,start+i,pwr2[i]);
                            if(write_clr_file)
                              fprintf(clr_data,"%4d: %8d %8.3lf\n",i,start+i,pwr2[i]);
                          }
                          fclose(clr_data);  
                        }
                        if(pwr!=NULL) free(pwr);
                        pwr=NULL;  
                        if(verbose > 0 ) printf("Send clrfreq data back\n");	
                        rval=send_data(msgsock, &clrfreq_parameters, sizeof(struct CLRFreqPRM));
                        rval=send_data(msgsock, &N, sizeof(int));
                        rval=send_data(msgsock, pwr2, sizeof(double)*N);  //freq order power
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        fftw_destroy_plan(plan);
                        fftw_free(in); 
                        fftw_free(out);
                        in=NULL;
                        out=NULL;
                        if(pwr2!=NULL) free(pwr2);
                        pwr2=NULL;  
                        if (verbose > 1) { 
                          gettimeofday(&t1,NULL);
                          elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                          elapsed+=(t1.tv_usec-t0.tv_usec);
                          printf("  Receiver: ClrFreq Search Elapsed Microseconds: %ld\n",elapsed);
                        }
                        break;                      

		      default:
			if (verbose > 0) fprintf(stderr,"BAD CODE: %c : %d\n",datacode,datacode);
                        msg.status=0;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
			break;
		    }
		  }	
		} 
		if (verbose > 0 ) fprintf(stderr,"Closing socket\n");
		close(msgsock);
	};
        fftw_destroy_plan(plan);
        fftw_free(in); 
        fftw_free(out);

        return 1;
}






