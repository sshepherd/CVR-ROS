//top- clock-out
//     clock-in
//     trigger
//     chan4
//     chan3
//     chan2
//bot- chan1
 

#include <errno.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <math.h>
#include <netdb.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/mman.h>
#include <sys/stat.h>
#ifdef __QNX__
  #include <sys/dispatch.h>
  #include <sys/iofunc.h>
  #include <sys/iomsg.h>
  #include <devctl.h>
  #include <hw/inout.h>
  #include  <hw/pci.h>
  #include <sys/socket.h>
  #include <sys/neutrino.h>
  #include <netinet/in.h>
  #include <netinet/tcp.h>
  #include <sys/neutrino.h>
#endif
#include "control_program.h"
#include "global_server_variables.h"
#include "utils.h"
#include "dds_defs.h"
#include "ics660b.h"

#define MAX_TSG 16
#define	MAX_TIME_SEQ_LEN 1048576
#define X_bit 0x04
#define P_bit 0x10
#define IMAGING 0
#define DDS_MAX_CHANNELS 4
int sock,msgsock;
int verbose=0;

//int		writingFIFO=0, IRQ, intid;
//, xfercount, totransfer;


//int msi_timing_sequence(int numclients,int max_seq_length,struct  ClientProgram  *clients,int seqlength[MAX_RADARS]
//  [MAX_CHANNELS] ,int *seq_buf[MAX_RADARS][MAX_CHANNELS],FILE *ics660);
//int set_freq( int freq_in, FILE *ics660[]);
void graceful_cleanup(int signum)
{
  close(msgsock);
  close(sock);
  exit(0);
}


int main(){
    // DECLARE AND INITIALIZE ANY NECESSARY VARIABLES

	// socket and message passing variables
	char	datacode;
	int	rval;
        fd_set rfds,efds;
        int status;

	// counter and temporary variables
	int	i,j,k,r,c,cc,buf,ratio,index,numclients=0;
	int	tempcode;
        double microseconds;
        // ics660 variables
        int pci_ind,pci_min,pci_max;
        FILE *ics660[4];
        char *device;
        int enable = ENABLE;

        struct  DriverMsg msg;

	// timing related variables
        struct  timeval tv;
	struct	timespec	start, stop, sleep, now;
	float	ftime;
	int	clockresolution;
	time_t	tod;

        int  maxclients=MAX_RADARS*MAX_CHANNELS;
        int  max_seq_count;
        int  seq_count[MAX_RADARS][MAX_CHANNELS];
        int  old_pulse_index[MAX_RADARS][MAX_CHANNELS];
        int  freq[MAX_RADARS][MAX_CHANNELS];
        int  ready_index[MAX_RADARS][MAX_CHANNELS];
        int  phase[MAX_RADARS][MAX_CHANNELS][MAX_TRANSMITTERS];
        int  *seq_buf[MAX_RADARS][MAX_CHANNELS];
        struct  ControlPRM  clients[maxclients],client;
        struct  TSGbuf *pulseseqs[MAX_RADARS][MAX_CHANNELS][MAX_SEQS];
        unsigned char *code[MAX_RADARS][MAX_CHANNELS];
        unsigned char *rep[MAX_RADARS][MAX_CHANNELS];
        unsigned long counter;
        struct timeval t0,t1,t2,t3;
        unsigned long elapsed;

#ifdef __QNX__
	struct	 _clockperiod 	new, old;

#endif
//BEAM vars
        int channel,chip,b_ind;
        int T_rise=10;
        double ph,b0,freq_in;
        double wvnum,bmang; 
        float C=3.e8;
        double pi;
        double state_time = STATE_TIME;
//TIMESEQ vars
        int t_seq[200];
        int state1,state2;
        int inc;
        int seqlen=0; 
        int old_seq_id=-1;
        int new_seq_id=0;


//	unsigned int	*master_buf;
        
//	int		 pseq[7]={0, 3, 4, 6}, scope_sync[16384], TR[16384], TX[16384], TX_array[16384], 
//                         trigger[16384], FIFOlevel[16384];
//	int		 tau=2400, tperiod=1, tlength=300, time_array[10], intt=200, loopcount=0, fifocnt=0;

//        signal(SIGINT, graceful_cleanup);
        pi=3.1415926;
        pci_min=0;
        pci_max=0;
        max_seq_count=0;
	if (verbose > 1) printf("Zeroing arrays\n");
	for (r=0;r<MAX_RADARS;r++){
	  for (c=0;c<MAX_CHANNELS;c++){
	    if (verbose > 1) printf("%d %d\n",r,c);
	    for (i=0;i<MAX_SEQS;i++) pulseseqs[r][c][i]=NULL;
            old_pulse_index[r][c]=-1; 
            ready_index[r][c]=-1; 
            seq_buf[r][c]=malloc(4*MAX_TIME_SEQ_LEN);
          } 
        }


#ifdef __QNX__
  /*open ics660 file */

  if (verbose > 0) printf("Opening ics660 device files\n");
  for( pci_ind=pci_max; pci_ind >= pci_min; pci_ind --)
    {  
      device = (char *)calloc((size_t) 64, sizeof(char));
      sprintf(device,"/dev/ics660-%d",(int)pci_ind);
      // pdebug(stderr,"ICS660_XMT_FP opening %s\n",device);
      ics660[pci_ind] = (FILE *)open(device, O_RDWR);
      if (verbose > 1) printf("%d Device: %s File: %d\n",pci_ind,device,ics660[pci_ind]);
      free(device);
    }
  
  /* initial the ics660 and dc60m card */
  if (verbose > 0) printf("Init ics660 and dc60m chips\n");
  for( pci_ind=pci_max; pci_ind>=pci_min; pci_ind--){
    if (verbose > 1) printf("%d Status: ",pci_ind);
    status=ics660_init(ics660[pci_ind],pci_ind);
    if (verbose > 1) printf("%d\n",status);
  }
  
  /* Set DAC enable bit in control register */
  if (verbose > 0) printf("Set DAC enable bit in control register\n");
  for( pci_ind=pci_max; pci_ind>=pci_min; pci_ind--)
    ics660_set_parameter((int)ics660[pci_ind],ICS660_DAC_ENABLE,&enable, sizeof(enable));
  
  if (verbose > 0) printf("Set DC READY bit in control register\n");
  for(pci_ind=pci_max; pci_ind>=pci_min; pci_ind--)
    ics660_set_parameter((int)ics660[pci_ind],ICS660_SET_DC_READY, &enable, sizeof(enable));
  
  if (verbose > 0) printf("Release Resets\n");
  for(pci_ind=pci_max; pci_ind>=pci_min; pci_ind--)
    ics660_set_parameter((int)ics660[pci_ind],ICS660_RELEASE_RESETS, &enable, sizeof(enable));
#endif


//                master_buf=malloc(4*MAX_TIME_SEQ_LEN);



    // OPEN TCP SOCKET AND START ACCEPTING CONNECTIONS 
	sock=tcpsocket(DDS_HOST_PORT);
	listen(sock, 5);
	while (1) {
                rval=1;
		msgsock=accept(sock, 0, 0);
		if (verbose > 0) printf("accepting socket!!!!!\n");
		if( (msgsock==-1) ){
			perror("accept FAILED!");
			return EXIT_FAILURE;
		}
		else while (rval>=0){
                  /* Look for messages from external client process */
                  FD_ZERO(&rfds);
                  FD_SET(msgsock, &rfds); //Add msgsock to the read watch
                  FD_ZERO(&efds);
                  FD_SET(msgsock, &efds);  //Add msgsock to the exception watch
                  /* Wait up to five seconds. */
                  tv.tv_sec = 5;
                  tv.tv_usec = 0;
		  if (verbose > 1) printf("%d Entering Select\n",msgsock);
                  rval = select(msgsock+1, &rfds, NULL, &efds, &tv);
		  if (verbose > 1) printf("%d Leaving Select %d\n",msgsock,rval);
                  /* Donâ€™t rely on the value of tv now! */
                  if (FD_ISSET(msgsock,&efds)){
                    if (verbose > 1) printf("Exception on msgsock %d ...closing\n",msgsock);
                    break;
                  }
                  if (rval == -1) perror("select()");
                  rval=recv(msgsock, &buf, sizeof(int), MSG_PEEK); 
                  if (verbose>1) printf("%d PEEK Recv Msg %d\n",msgsock,rval);
		  if (rval==0) {
                    if (verbose > 1) printf("Remote Msgsock %d client disconnected ...closing\n",msgsock);
                    break;
                  } 
		  if (rval<0) {
                    if (verbose > 0) printf("Msgsock %d Error ...closing\n",msgsock);
                    break;
                  } 
                  if ( FD_ISSET(msgsock,&rfds) && rval>0 ) {
                    if (verbose>1) printf("Data is ready to be read\n");
		    if (verbose > 1) printf("%d Recv Msg\n",msgsock);
                    rval=recv_data(msgsock,&msg,sizeof(struct DriverMsg));
                    datacode=msg.type;
		    if (verbose > 1) printf("\nmsg code is %c\n", datacode);
		    switch( datacode ){
		      case DDS_REGISTER_SEQ:
		        if (verbose > 0) printf("\nRegister new timing sequence for timing card\n");	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
			if (verbose > 1) printf("Radar: %d, Channel: %d Beamnum: %d Status %d\n",
			  client.radar,client.channel,client.tbeam,msg.status);	
		        rval=recv_data(msgsock,&index,sizeof(index));
                        if (pulseseqs[r][c][index]!=NULL) {
                          if (pulseseqs[r][c][index]->rep!=NULL) free(pulseseqs[r][c][index]->rep);
                          if (pulseseqs[r][c][index]->code!=NULL) free(pulseseqs[r][c][index]->code);
                          free(pulseseqs[r][c][index]);
                        }
                        pulseseqs[r][c][index]=malloc(sizeof(struct TSGbuf));
                        rval=recv_data(msgsock,pulseseqs[r][c][index], sizeof(struct TSGbuf)); // requested pulseseq
                        pulseseqs[r][c][index]->prm=malloc(sizeof(struct TSGprm));
                        rval=recv_data(msgsock,pulseseqs[r][c][index]->prm, sizeof(struct TSGprm)); // requested pulseseq
                        pulseseqs[r][c][index]->rep=
                          malloc(sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        pulseseqs[r][c][index]->code=
                          malloc(sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        rval=recv_data(msgsock,pulseseqs[r][c][index]->rep, 
                          sizeof(unsigned char)*pulseseqs[r][c][index]->len);
                        rval=recv_data(msgsock,pulseseqs[r][c][index]->code, 
                          sizeof(unsigned char)*pulseseqs[r][c][index]->len);
			if (verbose > -1) {
                          printf("Pulseseq length: %d\n",pulseseqs[r][c][index]->len);	
                          printf("  Stdelay: %d\n",pulseseqs[r][c][index]->prm->stdelay);	
                        }
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break;

		      case DDS_CtrlProg_READY:
		        if (verbose > 0) printf("Asking to set up dds timing info for client that is ready\n");	
		        rval=recv_data(msgsock,&client,sizeof(struct ControlPRM));
                        r=client.radar-1; 
                        c=client.channel-1; 
                        index=client.current_pulseseq_index; 
                        if ((ready_index[r][c]>=0) && (ready_index[r][c] <maxclients) ) {
                          clients[ready_index[r][c]]=client;
                        } else {
                          clients[numclients]=client;
                          ready_index[r][c]=numclients;
                          numclients=(numclients+1);
                        }
			if (verbose > 1) printf("Radar: %d, Channel: %d Beamnum: %d Status %d\n",
			  client.radar,client.channel,client.tbeam,msg.status);	
                        index=client.current_pulseseq_index; 
                        if (index!=old_pulse_index[r][c]) {
			  if (verbose > 1) printf("Need to unpack pulseseq\n");	
			  if (verbose > 1) printf("Pulseseq length: %d\n",pulseseqs[r][c][index]->len);	
			// unpack the timing sequence
			  seq_count[r][c]=0;
                          microseconds=0.0; 
                          tempcode=0;
	                  if (verbose > 1) printf("microstep: %d state: %lf ratio: %d\n",
                                                pulseseqs[r][c][index]->step,STATE_TIME,ratio);
                          ratio=(int)((pulseseqs[r][c][index]->step*1E-6)/STATE_TIME+.49999999);
			  for(i=0;i<pulseseqs[r][c][index]->len;i++){
			    tempcode=_decodestate(r,c,pulseseqs[r][c][index]->code[i]);	
//JDS TODO chop off first STATE_DELAY microseconds
			    for( j=0;j<ratio*pulseseqs[r][c][index]->rep[i];j++){
                              microseconds+=STATE_TIME/1E-6;
                              if(microseconds > STATE_DELAY ) {
			        seq_buf[r][c][seq_count[r][c]]=tempcode;
			        seq_count[r][c]++;
                              }
			    }
			  }

                        }
	                  if (verbose > 1) printf("seq length: %d state step: %lf time: %lf\n",
                                                seq_count[r][c],STATE_TIME,STATE_TIME*seq_count[r][c]);
                        if (numclients >= maxclients) msg.status=-2;
		        if (verbose > 1) printf("client %d ready done %d %d \n",numclients,client.radar,client.channel);	
                        numclients=numclients % maxclients;
                        old_pulse_index[r][c]=index;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        break; 

		      case DDS_PRETRIGGER:
			if(verbose > 0 ) {
                          printf("Setup DDS Card for PRE-trigger\n");	
                          gettimeofday(&t0,NULL);
                        }
		        if (verbose > 0) printf("Numclients %d\n",numclients);	
                        new_seq_id=0;
	                for( i=0; i<numclients; i++) {
                          r=clients[i].radar-1; 
                          c=clients[i].channel-1; 
                          if (seq_count[r][c]>=max_seq_count) max_seq_count=seq_count[r][c];
		          if (verbose > 0) printf("Max Seq length %d\n",max_seq_count);	
                          new_seq_id+=r*MAX_CHANNELS*MAX_SEQS +
                                      c*MAX_SEQS +
                                      clients[i].current_pulseseq_index;
		          if (verbose > 1) printf("%d %d %d\n",i,new_seq_id,clients[i].current_pulseseq_index);	
                        }
                        if (verbose > 0) printf("Time Seq ID: New: %d Old:%d\n",new_seq_id,old_seq_id);	
	  /* send the seqence to timing_seqence function */
                        if (IMAGING==0) {
                          /* SET freq and filter for MSI */
                          if (new_seq_id!=old_seq_id) { 
                            if (verbose > 1) printf("Setting the TX timing sequence\n");	
                            gettimeofday(&t2,NULL);
                            msi_timing_sequence(numclients,max_seq_count,clients,&seq_count,seq_buf,ics660);
                            if (verbose > 0) {
                              gettimeofday(&t3,NULL);
                              elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                              elapsed+=(t3.tv_usec-t2.tv_usec);
                              printf("  DDS MSI Timing Elapsed Microseconds: %ld\n",elapsed);
                          }
                            /* Required one shot */
                          } else {
                            /* Use old timing sequence */                          
                          } 
                          pci_ind=0;
	                  one_shot_b(ics660[pci_ind]);
                          gettimeofday(&t2,NULL);
	                  pci_ind=0;
	                  for( i=0; i<numclients; i++) {
	                    freq_in= (double)clients[i].tfreq * 1000.; // in Hz
                            T_rise=clients[i].trise;
	                    r= clients[i].radar;
	                    c= clients[i].channel;
                            if (i==0) {
                              for (cc=1;cc<=DDS_MAX_CHANNELS;cc++) {                            
                                load_frequency(ics660[pci_ind], r, cc, freq_in);
                                load_filter_taps(ics660[pci_ind],r,cc,T_rise,state_time);
                              }
                            } 
                            if (verbose>2) printf(" Loading %d freq: %lf chip: %d channel: %d\n",i,freq_in,r,c);
                            load_frequency(ics660[pci_ind], r, c, freq_in);
                            load_filter_taps(ics660[pci_ind],r,c,T_rise,state_time);
                            if(IF_ENABLED) {                   
                              r=clients[i].radar+2;
                              T_rise=clients[i].trise;
	                      freq_in= ((double)(IF_FREQ-clients[i].tfreq)) * 1000./2.0; // in Hz

                              for (cc=1;cc<=DDS_MAX_CHANNELS;cc++) {                            
                                load_frequency(ics660[pci_ind], r, cc, freq_in);
                                load_filter_taps(ics660[pci_ind],r,cc,T_rise,state_time);
                              }
                            }
	                  }
                          gettimeofday(&t3,NULL);
                          elapsed=(t3.tv_sec-t2.tv_sec)*1E6;
                          elapsed+=(t3.tv_usec-t2.tv_usec);
                        if (verbose > 0) printf("  DDS Set Filter and Freq  Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1) printf("Done setting the beam\n");	
                        } else {
          /* SET freq, filter and BEAM CODE for IMAGING */
                          if (new_seq_id!=old_seq_id) { 
                            if (verbose > 1) printf("Setting the timing sequence\n");	
                          } 
                        } 
                        msg.status=0;
                        numclients=0;
                        for (r=0;r<MAX_RADARS;r++){
                          for (c=0;c<MAX_CHANNELS;c++){
                            ready_index[r][c]=-1;
                          }
                        }
                        max_seq_count=0;
                        old_seq_id=new_seq_id;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
                        gettimeofday(&t1,NULL);
                        elapsed=(t1.tv_sec-t0.tv_sec)*1E6;
                        elapsed+=(t1.tv_usec-t0.tv_usec);
                        if (verbose > 0) printf("  DDS Pretrigger Elapsed Microseconds: %ld\n",elapsed);
                        if (verbose > 1)  printf("Ending Pretrigger Setup\n");
                        break; 

/*		      case DDS_TRIGGER:
			if (verbose > 0 ) printf("Setup DDS Card trigger\n");	
			if (verbose > 1) printf("Read msg struct from tcp socket!\n");	
                        numclients=0;
                        max_seq_count=0;
                        rval=send_data(msgsock, &msg, sizeof(struct DriverMsg));
			if (verbose > 0 ) printf("End Timing Card trigger\n");	
                        break;
*/
		      default:
			if (verbose > 0) fprintf(stderr,"BAD CODE: %c : %d\n",datacode,datacode);
			break;
		    }
		  }	
		} 
		if (verbose > 0 ) fprintf(stderr,"Closing socket\n");
		close(msgsock);
	};

        return 1;
}
